# server port set
server:
  port: 8000

# eureka client set
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: api-gateway-service
    # rabbitmq set
  rabbitmq:
      host: 127.0.0.1
      port: 5672
      username: guest
      password: guest
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
          # service id, url set
        - id: user-service
          uri: lb://user-service
          # 조건절
          predicates:
            - Path=/user-service/login
            # Http Method Set
            - Method=POST
          filters:
            # remove 요청 되어 있는 header 값 삭제 -> POST 로 전달 되는 값은 매번 새로운 데이터로 인식하기 위해
            - RemoveRequestHeader=Cookie
            # path 재작성 -> prefix 처럼 붙어 있는 xxx-service 를 제거
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
          # service id, url set
        - id: user-service
          uri: lb://user-service
          # 조건절
          predicates:
            - Path=/user-service/users
            # Http Method Set
            - Method=POST
          filters:
            # remove 요청 되어 있는 header 값 삭제 -> POST 로 전달 되는 값은 매번 새로운 데이터로 인식하기 위해
            - RemoveRequestHeader=Cookie
            # path 재작성 -> prefix 처럼 붙어 있는 xxx-service 를 제거
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
          # service id, url set
        - id: user-service
          uri: lb://user-service
          # 조건절
          predicates:
            - Path=/user-service/**
            # Http Method Set
            - Method=GET
          filters:
            # remove 요청 되어 있는 header 값 삭제 -> POST 로 전달 되는 값은 매번 새로운 데이터로 인식하기 위해
            - RemoveRequestHeader=Cookie
            # path 재작성 -> prefix 처럼 붙어 있는 xxx-service 를 제거
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            # 회원가입, 로그인을 제외한 모든 요청에 인가 필터 적용
            - AuthorizationHeaderFilter
          # service id, url set
        - id: user-service
          uri: lb://user-service
          # 조건절
          predicates:
            - Path=/user-service/actuator/**
            # Http Method Set
            - Method=GET, POST
          filters:
            # remove 요청 되어 있는 header 값 삭제 -> POST 로 전달 되는 값은 매번 새로운 데이터로 인식하기 위해
            - RemoveRequestHeader=Cookie
            # path 재작성 -> prefix 처럼 붙어 있는 xxx-service 를 제거
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
          # service id, url set
        - id: catalog-service
          uri: lb://catalog-service
          # 조건절
          predicates:
            - Path=/catalog-service/**
          # service id, url set
        - id: order-service
          uri: lb://order-service
          # 조건절
          predicates:
            - Path=/order-service/**
        - id: order-service
          uri: lb://order-service
          # 조건절
          predicates:
            - Path=/order-service/actuator/**
            # Http Method Set
            - Method=GET
          filters:
            # remove 요청 되어 있는 header 값 삭제 -> POST 로 전달 되는 값은 매번 새로운 데이터로 인식하기 위해
            - RemoveRequestHeader=Cookie

#          # service id, url set
#        - id: first-service
#          uri: lb://my-first-service
#          # add filter
#          filters:
##            - AddRequestHeader=first-request, first-request-header
##            - AddResponseHeader=first-response, first-response-header
#            - CustomFilter
#          # 조건절
#          predicates:
#            - Path=/first-service/**
#        - id: second-service
#          uri: lb://my-second-service
#          # add filter
#          filters:
##            - AddRequestHeader=second-request, second-request-header
##            - AddResponseHeader=second-response, second-response-header
#            # 추가 파라미터를 사용하려면 name을 작성해야 한다.
#            - name: CustomFilter
#            - name: LoggingFilter
#              args:
#                baseMessage: Hi, there.
#                preLogger: true
#                postLogger: true
#          predicates:
#            - Path=/second-service/**

# token 복호화를 위해
#token:
#  secret: userToken # 임의의 값

# actuator
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh, info, metrics, prometheus